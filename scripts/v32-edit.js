const fs=require('fs');
const p='src\\app\\api\\ai\\chat\\route.ts';
let s=fs.readFileSync(p,'utf8');
// 1) Add new state variant after PASO_1_ESPERANDO_CLIENTE
s=s.replace(/\| \{ step: 'PASO_1_ESPERANDO_CLIENTE'[^\n]*\n/, m=> m + "  | { step: 'PASO_2_ESPERANDO_SERVICIO'; clienteId: number; clienteNombre: string; subdivision: string | null; respuestasGlobales: Record<string, string> }\n");
// 2) Change arr.length===0 transition to new question
s=s.replace(/sessionStates\.set\(user\.id, \{ step: 'PASO_2_ESPERANDO_CATEGORIA'[\s\S]*?\}\);\n\s*const texto = ¡Claro! Empecemos tu solicitud\. No hay preguntas generales, así que inicia seleccionando la categoría de servicio: [^]*;/, "sessionStates.set(user.id, { step: 'PASO_2_ESPERANDO_SERVICIO', clienteId: 0, clienteNombre: '', subdivision: null, respuestasGlobales: {} });\n        const texto = ¡Claro! Empecemos tu solicitud. Entendido. Ahora, ¿qué servicio necesitas cotizar?;");
// 3) Change Globales terminadas transition to new question
s=s.replace(/sessionStates\.set\(user\.id, \{ step: 'PASO_2_ESPERANDO_CATEGORIA'[\s\S]*?\}\);\n\s*const texto = Gracias\. Ahora selecciona la categoría de servicio: [^]*;/, "sessionStates.set(user.id, { step: 'PASO_2_ESPERANDO_SERVICIO', clienteId, clienteNombre, subdivision, respuestasGlobales: respuestas });\n      const texto = Entendido. Ahora, ¿qué servicio necesitas cotizar?;");
// 4) Insert new PASO_2_ESPERANDO_SERVICIO handler before category handler
s=s.replace(/\n\s*\/\/ --- PASO 2: Selección data-driven del servicio ---/, "\n\n    // --- PASO 2 v3.2: Búsqueda abierta de servicio con ILIKE en 3 columnas ---\n    if (estado.step === 'PASO_2_ESPERANDO_SERVICIO' && mensajeUsuario.length > 0) {\n      const termino = mensajeUsuario.trim();\n      const patron = %%;\n      const { data: servMatches, error: servErr } = await supabaseAuthed!\n        .from('servicios')\n        .select('id, categoria, subcategoria_1, subcategoria_2')\n        .or(categoria.ilike.,subcategoria_1.ilike.,subcategoria_2.ilike.)\n        .limit(20);\n      if (servErr) return NextResponse.json({ error: 'Error buscando servicios', details: servErr.message }, { status: 400 });\n      const rows = Array.isArray(servMatches) ? servMatches : [];\n\n      if (rows.length === 0) {\n        const texto = No he podido encontrar el servicio '' en nuestra base de datos. ¿Puedes intentarlo de nuevo?;\n        return new NextResponse(texto, { headers: { 'Content-Type': 'text/plain; charset=utf-8' } });\n      }\n\n      const nInput = normalizeText(termino);\n      const exactos = rows.filter(r => {\n        const nc = normalizeText(String(r.categoria || ''));\n        const n1 = normalizeText(String(r.subcategoria_1 || ''));\n        const n2 = normalizeText(String(r.subcategoria_2 || ''));\n        return nc === nInput || n1 === nInput || n2 === nInput;\n      });\n\n      const elegido = (exactos.length === 1 ? exactos[0] : (rows.length === 1 ? rows[0] : null));\n      if (elegido) {\n        const { data: preguntasEspec, error: peErr } = await supabaseAuthed!\n          .from('brief_preguntas')\n          .select('*')\n          .eq('categoria', elegido.categoria)\n          .eq('subcategoria_1', elegido.subcategoria_1)\n          .eq('subcategoria_2', elegido.subcategoria_2)\n          .order('orden', { ascending: true });\n        if (peErr) return NextResponse.json({ error: 'Error consultando preguntas específicas', details: peErr.message }, { status: 400 });\n        const arrE = Array.isArray(preguntasEspec) ? preguntasEspec : [];\n        sessionStates.set(user.id, {\n          step: 'PASO_3_ESPECIFICAS_PENDIENTES',\n          clienteId: estado.clienteId,\n          clienteNombre: estado.clienteNombre,\n          subdivision: estado.subdivision,\n          servicioCategoria: elegido.categoria,\n          subcategoria1: elegido.subcategoria_1,\n          subcategoria2: elegido.subcategoria_2,\n          preguntas: arrE,\n          indice: 0,\n          respuestasGlobales: estado.respuestasGlobales,\n          respuestasEspecificas: {}\n        });\n        const lead = ¡Perfecto! Para tu solicitud de '', necesito hacerte unas preguntas...;\n        const q0 = arrE[0] || {};\n        const textoQ = String((q0).pregunta_texto || (q0).pregunta || (q0).texto || (q0).enunciado || 'Primera pregunta específica');\n        return new NextResponse(${lead} , { headers: { 'Content-Type': 'text/plain; charset=utf-8' } });\n      }\n\n      const opciones = rows.slice(0, Math.min(rows.length, 10));\n      sessionStates.set(user.id, {\n        step: 'PASO_2_ESPERANDO_SERVICIO_AMBIGUO',\n        clienteId: estado.clienteId,\n        clienteNombre: estado.clienteNombre,\n        subdivision: estado.subdivision,\n        opcionesServicios: opciones.map(r => ({ categoria: r.categoria, subcategoria_1: r.subcategoria_1, subcategoria_2: r.subcategoria_2 })),\n        respuestasGlobales: estado.respuestasGlobales\n      });\n      const lista = opciones.map((r, i) => ${i + 1}.  /  / ).join('\n');\n      const texto = Entendido. Al buscar '', encontré  opciones:\n\n¿A cuál te refieres?;\n      return new NextResponse(texto, { headers: { 'Content-Type': 'text/plain; charset=utf-8' } });\n    }\n\n    // --- PASO 2: Selección data-driven del servicio ---");
fs.writeFileSync(p,s);
